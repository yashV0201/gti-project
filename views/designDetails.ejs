<%- include('partials/header') %>

<style>
  /* Scoped styles specifically for design method content */
  .design-document-content img:hover {
      transform: scale(1.05);
  } 

    /* Add these link-specific styles */
    .design-document-content a {
    word-break: break-all;
    overflow-wrap: break-word;
    max-width: 100%;
    display: inline-block;
    }

    /* Additional specific styling for links in list items */
    .design-document-content li a {
    max-width: calc(100% - 25px);
    }

  /* Image popup styles */
  #image-popup {
        display: none;
        position: fixed;
        z-index: 1000;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0,0,0,0.8);
        align-items: center;
        justify-content: center;
    }

    #image-popup.show {
        display: flex;
    }

    #image-popup img {
        max-width: 90%;
        max-height: 90%;
        object-fit: contain;
    }

    #image-popup-close {
        position: absolute;
        top: 15px;
        right: 35px;
        color: white;
        font-size: 40px;
        font-weight: bold;
        cursor: pointer;
    }

  @media (max-width: 600px) {
      .design-document-content {
          padding: 10px;
      }
      
      .design-document-content p {
          padding: 0 10px;
      }

      .design-document-content img {
            max-width: 100%; /* Full width on small screens */
      }
  }
</style>

<div class="container mt-5">
    <div class="max-w-4xl mx-auto px-4">
        <h1 class="text-5xl font-extrabold text-center my-8"><%= title %></h1>
        
        <div class="flex justify-center mb-6">
            <% if (currentUser && currentUser.role === 'admin') { %>
              <!-- Green button for admin -->
              <button id="updateBtn" class="bg-green-600 hover:bg-green-700 text-white font-medium py-2 px-6 rounded-full transition-colors">
                Update
              </button>
            <% } else { %>
              <!-- Gray button for non-admin users, disabled -->
              <button id="updateBtn" class="bg-gray-600 text-white font-medium py-2 px-6 rounded-full transition-colors cursor-not-allowed opacity-50" disabled>
                Update
              </button>
            <% } %>
          </div>
          
          
        <div id="updateForm" style="display: none;" class="bg-blue-200 rounded-lg p-6 max-w-2xl mx-auto mb-8">
          <form action="/design-methods/<%= id %>?_method=PUT" method="POST" enctype="multipart/form-data" class="flex flex-col space-y-4">
            <input type="text" name="title" id="title" value="<%= title %>" required
              class="bg-gray-800 text-white border border-gray-700 rounded-lg p-3 focus:ring-2 focus:ring-blue-500 focus:border-transparent">
            <input type="hidden" name="id" value="<%= Number(id) %>">
            
            <div class="flex flex-col md:flex-row md:items-center gap-4">
                <input type="file" id="document" name="document" class="flex-grow p-3 bg-gray-800 text-white rounded-lg">
                <div class="flex gap-2">
                  <button class="px-6 py-2 bg-blue-600 text-white rounded-full">Save</button>
                  <button class="px-6 py-2 bg-red-600 text-white rounded-full">Cancel</button>
                </div>
            </div>
          </form>
        </div>
      </div>
      


  <!-- The HTML conversion of the Word document will be inserted here -->
  <div class="design-document-content">
    <%- html %>
  </div>
  <div id="image-popup">
    <span id="image-popup-close">&times;</span>
    <img id="popup-image" src="" alt="Enlarged image">
</div>
</div>

<script>
    function hideForm() {
        document.getElementById('updateForm').style.display = 'none';
    }

    document.getElementById('updateBtn').addEventListener('click', () => {
        // if(currentUser && currentUser.role === 'admin'){
            document.getElementById('updateForm').style.display = 'block';
        // }
        
    });
    // // Get all image elements on the page
    // const images = document.getElementsByTagName('img');

    // // Iterate through all images and set their size
    // for (let i = 0; i < images.length; i++) {
    //   images[i].style.width = 'auto';  // Set desired width
    //   images[i].style.height = '200px';  // Maintain aspect ratio
    //   // Or set a fixed height: images[i].style.height = '200px';
    //   imgages[i].addEventListener('click', () => {
    //                 imgaes[i].classList.toggle('expanded');
    //             });
    // }

    document.addEventListener('DOMContentLoaded', () => {
        const images = document.querySelectorAll('.design-document-content img');
        const popup = document.getElementById('image-popup');
        const popupImg = document.getElementById('popup-image');
        const closeBtn = document.getElementById('image-popup-close');

        // Add click event to all images
        images.forEach(img => {
            img.addEventListener('click', () => {
                popupImg.src = img.src;
                popup.classList.add('show');
            });
        });

        // Close popup when close button is clicked
        closeBtn.addEventListener('click', () => {
            popup.classList.remove('show');
        });

        // Close popup when clicking outside the image
        popup.addEventListener('click', (e) => {
            if (e.target === popup) {
                popup.classList.remove('show');
            }
        });
    });



    document.addEventListener('DOMContentLoaded', () => {
    // Target the container with the converted Word document
    const contentContainer = document.querySelector('.design-document-content');
    
    // Apply Tailwind classes to the container
    contentContainer.classList.add('max-w-4xl', 'mx-auto', 'p-6', 'bg-slate-300', 'rounded-lg', 'shadow-md');
    
    
    // Process paragraphs
    const paragraphs = contentContainer.querySelectorAll('p');
    paragraphs.forEach(paragraph => {
        // Skip paragraphs that are part of other elements like lists
        if (paragraph.closest('li, blockquote, table')) return;
        
        // Remove any existing classes
        paragraph.className = '';
        
        // Apply paragraph styles
        paragraph.classList.add('text-gray-700', 'leading-relaxed', 'mb-4', 'px-2');
    });
    
    // Process images
    const images = contentContainer.querySelectorAll('img');
    images.forEach(image => {
        // Remove any existing classes and inline styles
        image.className = '';
        image.removeAttribute('style');
        
        // Apply image styles
        image.classList.add('mx-auto', 'rounded-lg', 'shadow-md', 'hover:shadow-lg', 'transition-all', 'duration-300', 'ease-in-out', 'cursor-pointer', 'my-6');
        
        // Responsive image sizing
        image.classList.add('w-auto', 'md:max-w-md', 'lg:max-w-lg');
    });
    
    // Process lists
    const lists = contentContainer.querySelectorAll('ul, ol');
    lists.forEach(list => {
        // Remove any existing classes
        list.className = '';
        
        // Apply list styles
        list.classList.add('ml-6', 'mb-4', 'text-gray-700');
        
        if (list.tagName === 'UL') {
            list.classList.add('list-disc');
        } else {
            list.classList.add('list-decimal');
        }
        
        // Style list items
        const items = list.querySelectorAll('li');
        items.forEach(item => {
            item.classList.add('mb-2', 'pl-1');
        });
    });
    
    // Process tables
    const tables = contentContainer.querySelectorAll('table');
    tables.forEach(table => {
        // Remove any existing classes
        table.className = '';
        
        // Apply table styles
        table.classList.add('min-w-full', 'border-collapse', 'mb-6', 'rounded-lg', 'overflow-hidden', 'shadow-md');
        
        // Style table headers
        const headers = table.querySelectorAll('th');
        headers.forEach(header => {
            header.classList.add('bg-indigo-100', 'text-left', 'px-4', 'py-2', 'text-indigo-800', 'font-semibold', 'border', 'border-gray-200');
        });
        
        // Style table cells
        const cells = table.querySelectorAll('td');
        cells.forEach(cell => {
            cell.classList.add('px-4', 'py-2', 'border', 'border-gray-200');
        });
        
        // Style alternating rows
        const rows = table.querySelectorAll('tr:nth-child(even)');
        rows.forEach(row => {
            row.classList.add('bg-gray-50');
        });
    });
    
    // Process blockquotes
    const blockquotes = contentContainer.querySelectorAll('blockquote');
    blockquotes.forEach(blockquote => {
        blockquote.classList.add('border-l-4', 'border-indigo-300', 'pl-4', 'italic', 'text-gray-600', 'my-4', 'py-2');
    });
    
    // Process code blocks
    const codeBlocks = contentContainer.querySelectorAll('pre, code');
    codeBlocks.forEach(block => {
        block.classList.add('bg-gray-100', 'rounded', 'p-2', 'font-mono', 'text-sm', 'overflow-x-auto');
    });
    
    // Add responsive design improvements
    document.querySelectorAll('.design-document-content > *').forEach(element => {
        element.classList.add('max-w-full');
    });
});




</script>

<%- include('partials/footer') %>